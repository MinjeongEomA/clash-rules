name: Update Clash Rules

on:
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 00:00 运行（北京时间 08:00）
  workflow_dispatch:  # 允许手动触发

jobs:
  update-rules:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          npm init -y
          npm install axios
      
      - name: Create scripts directory
        run: mkdir -p scripts
      
      - name: Create conversion scripts
        run: |
          # 创建surge-to-clash.js
          cat > scripts/surge-to-clash.js << 'SCRIPT_EOL'
function convertSurgeRuleToClash(surgeRule) {
  // 忽略注释和空行
  if (surgeRule.trim().startsWith('#') || surgeRule.trim() === '') {
    return surgeRule;
  }

  // 处理基本规则类型
  if (surgeRule.startsWith('DOMAIN,') ||
      surgeRule.startsWith('DOMAIN-SUFFIX,') ||
      surgeRule.startsWith('DOMAIN-KEYWORD,') ||
      surgeRule.startsWith('IP-CIDR,') ||
      surgeRule.startsWith('IP-CIDR6,') ||
      surgeRule.startsWith('GEOIP,')) {
    return surgeRule;
  }

  // 其他不支持的规则类型
  return null;
}

function convertSurgeRulesToClash(surgeRules) {
  const lines = surgeRules.split('\n');
  let header = [];
  let rules = [];
  
  // 提取头部注释
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].startsWith('#')) {
      header.push(lines[i]);
    } else if (lines[i].trim() !== '') {
      break;
    }
  }
  
  // 转换规则
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    if (line === '' || line.startsWith('#')) {
      continue;
    }
    
    const clashRule = convertSurgeRuleToClash(line);
    if (clashRule !== null) {
      rules.push(clashRule);
    }
  }
  
  // 构建Clash规则集
  const clashRules = [
    ...header,
    '',
    'payload:'
  ];
  
  rules.forEach(rule => {
    clashRules.push(`  - ${rule}`);
  });
  
  return clashRules.join('\n');
}

module.exports = {
  convertSurgeRulesToClash
};
SCRIPT_EOL
          
          # 创建convert-rules.js
          cat > scripts/convert-rules.js << 'SCRIPT_EOL'
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const { convertSurgeRulesToClash } = require('./surge-to-clash');

// 规则集列表
const ruleSets = [
  // AI相关规则
  { name: 'AI', path: 'Rules/AI/AI.list' },
  { name: 'OpenAI', path: 'Rules/OpenAI/OpenAI.list' },
  { name: 'Gemini', path: 'Rules/Gemini/Gemini.list' },
  { name: 'Copilot', path: 'Rules/Copilot/Copilot.list' },
  
  // 科技公司
  { name: 'Google', path: 'Rules/Google/Google.list' },
  { name: 'Microsoft', path: 'Rules/Microsoft/Microsoft.list' },
  { name: 'GitHub', path: 'Rules/GitHub/GitHub.list' },
  { name: 'Apple', path: 'Rules/Apple/Apple.list' },
  
  // 流媒体
  { name: 'Netflix', path: 'Rules/Netflix/Netflix.list' },
  { name: 'Disney', path: 'Rules/Disney/Disney.list' },
  { name: 'YouTube', path: 'Rules/YouTube/YouTube.list' },
  { name: 'Spotify', path: 'Rules/Spotify/Spotify.list' },
  { name: 'HBO', path: 'Rules/HBO/HBO.list' },
  { name: 'Hulu', path: 'Rules/Hulu/Hulu.list' },
  
  // 社交媒体
  { name: 'Telegram', path: 'Rules/Telegram/Telegram.list' },
  { name: 'Discord', path: 'Rules/Discord/Discord.list' },
  { name: 'Instagram', path: 'Rules/Instagram/Instagram.list' },
  { name: 'Facebook', path: 'Rules/Facebook/Facebook.list' },
  { name: 'X', path: 'Rules/X/X.list' },
  { name: 'TikTok', path: 'Rules/TikTok/TikTok.list' },
  { name: 'Weibo', path: 'Rules/Weibo/Weibo.list' },
  
  // 游戏相关
  { name: 'Games', path: 'Rules/Games/Games.list' },
  { name: 'Xbox', path: 'Rules/Xbox/Xbox.list' },
  { name: 'Riot', path: 'Rules/Riot/Riot.list' },
  
  // 广告拦截
  { name: 'AdRules', path: 'Rules/AdRules/AdRules.list' },
  { name: 'BlockAds', path: 'Rules/BlockAds/BlockAds.list' },
  { name: 'anti-AD', path: 'Rules/anti-AD/anti-AD.list' },
  
  // 基础规则
  { name: 'Global', path: 'Rules/Global/Global.list' },
  { name: 'Mainland', path: 'Rules/Mainland/Mainland.list' },
  { name: 'ASNChina', path: 'Rules/ASNChina/ASNChina.list' },
  { name: 'ChinaDownloadCDN', path: 'Rules/ChinaDownloadCDN/ChinaDownloadCDN.list' }
];

// GitHub仓库基础URL
const baseUrl = 'https://raw.githubusercontent.com/mist-whisper/Surge/refs/heads/master/'\;

// 下载文件
async function downloadFile(url) {
  try {
    const response = await axios.get(url);
    return response.data;
  } catch (error) {
    console.error(`Error downloading ${url}: ${error.message}`);
    throw error;
  }
}

// 处理单个规则集
async function processRuleSet(ruleSet) {
  try {
    console.log(`Processing ${ruleSet.name}...`);
    
    // 下载Surge规则集
    const url = baseUrl + ruleSet.path;
    const surgeRules = await downloadFile(url);
    
    // 转换为Clash规则集
    const clashRules = convertSurgeRulesToClash(surgeRules);
    
    // 添加规则集元数据
    const now = new Date();
    const formattedDate = now.toISOString().split('T')[0];
    const metadata = [
      `# NAME: ${ruleSet.name}`,
      `# AUTHOR: MinjeongEom (converted from mist-whisper/Surge)`,
      `# UPDATED: ${formattedDate}`,
      `# DESCRIPTION: Clash规则集，由Surge规则集自动转换`,
      `# SOURCE: https://github.com/mist-whisper/Surge/blob/master/${ruleSet.path}`,
      `# CONVERTER: https://github.com/MinjeongEomA/clash-rules`,
      ``
    ].join('\n');
    
    const finalContent = clashRules.startsWith('#') 
      ? clashRules.replace(/^(#[^\n]*\n)+/, metadata) 
      : metadata + clashRules;
    
    // 创建规则集目录
    const dirName = path.dirname(ruleSet.path).replace('Rules/', '');
    const ruleDir = path.join('.', dirName);
    
    if (!fs.existsSync(ruleDir)) {
      fs.mkdirSync(ruleDir, { recursive: true });
    }
    
    // 保存Clash规则集
    const outputPath = path.join(ruleDir, `${ruleSet.name}.yaml`);
    fs.writeFileSync(outputPath, finalContent);
    
    console.log(`Converted ${ruleSet.name} successfully.`);
    return {
      name: ruleSet.name,
      directory: dirName,
      path: outputPath,
      content: finalContent
    };
  } catch (err) {
    console.error(`Error processing ${ruleSet.name}:`, err.message);
    return null;
  }
}

// 主函数
async function main() {
  console.log('Starting conversion...');
  
  const results = [];
  for (const ruleSet of ruleSets) {
    try {
      const result = await processRuleSet(ruleSet);
      if (result) {
        results.push(result);
      }
    } catch (error) {
      console.error(`Failed to process ${ruleSet.name}: ${error.message}`);
      // 继续处理其他规则集
    }
  }
  
  console.log(`Converted ${results.length} rule sets.`);
  
  // 更新README.md中的日期
  try {
    const readmePath = 'README.md';
    if (fs.existsSync(readmePath)) {
      let readme = fs.readFileSync(readmePath, 'utf8');
      const now = new Date();
      const formattedDate = now.toISOString().split('T')[0];
      readme = readme.replace(/最后更新时间: .*/, `最后更新时间: ${formattedDate}`);
      fs.writeFileSync(readmePath, readme);
      console.log('Updated README.md date');
    }
  } catch (error) {
    console.error(`Error updating README.md: ${error.message}`);
  }
}

// 执行主函数
main().catch(err => {
  console.error('Conversion failed:', err);
  process.exit(1);
});
SCRIPT_EOL
      
      - name: Run conversion script
        run: node scripts/convert-rules.js
      
      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add -A
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update rules - $(date +'%Y-%m-%d')" && git push)
